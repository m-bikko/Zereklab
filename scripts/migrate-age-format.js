const { MongoClient } = require('mongodb');

// Database connection
const MONGODB_URI =
  process.env.MONGODB_URI || 'mongodb://localhost:27017/zereklab';

// Convert old age range format to new minimum age format
function convertToMinimumAge(ageRange) {
  if (!ageRange) return '';

  // Remove "–ª–µ—Ç" and extra whitespace
  const cleaned = ageRange.replace(/–ª–µ—Ç/gi, '').trim();

  // If already in correct format (number+), return as is
  const plusMatch = cleaned.match(/^(\d+)\+$/);
  if (plusMatch) {
    return cleaned;
  }

  // Convert range format "6-8" to minimum age "6+"
  const rangeMatch = cleaned.match(/^(\d+)-(\d+)$/);
  if (rangeMatch) {
    return `${rangeMatch[1]}+`;
  }

  // Convert single number to minimum age format
  const numberMatch = cleaned.match(/^(\d+)$/);
  if (numberMatch) {
    return `${numberMatch[1]}+`;
  }

  // Return original if no pattern matches
  return ageRange;
}

async function migrateAgeFormat() {
  const client = new MongoClient(MONGODB_URI);

  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    await client.connect();

    const db = client.db();
    const collection = db.collection('products');

    console.log('üìä –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏...');

    // Find all products with ageRange field
    const products = await collection
      .find({
        ageRange: { $exists: true, $ne: null, $ne: '' },
      })
      .toArray();

    console.log(
      `üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏`
    );

    const updates = [];
    const stats = {
      total: products.length,
      converted: 0,
      unchanged: 0,
      errors: 0,
    };

    for (const product of products) {
      try {
        const originalAge = product.ageRange;
        const convertedAge = convertToMinimumAge(originalAge);

        if (originalAge !== convertedAge) {
          updates.push({
            updateOne: {
              filter: { _id: product._id },
              update: { $set: { ageRange: convertedAge } },
            },
          });

          console.log(
            `üîÑ ${product.name}: "${originalAge}" ‚Üí "${convertedAge}"`
          );
          stats.converted++;
        } else {
          console.log(`‚úÖ ${product.name}: "${originalAge}" (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)`);
          stats.unchanged++;
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.name}:`, error);
        stats.errors++;
      }
    }

    // Execute bulk update if there are changes
    if (updates.length > 0) {
      console.log(`\nüìù –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ ${updates.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...`);
      const result = await collection.bulkWrite(updates);
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${result.modifiedCount}`);
    } else {
      console.log('\n‚úÖ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }

    // Display final statistics
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò:');
    console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${stats.total}`);
    console.log(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${stats.converted}`);
    console.log(`‚úÖ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${stats.unchanged}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${stats.errors}`);

    if (stats.converted > 0) {
      console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log(
        '–¢–µ–ø–µ—Ä—å —Ç–æ–≤–∞—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3+, 6+)'
      );
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    await client.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// Run the migration
if (require.main === module) {
  migrateAgeFormat();
}

module.exports = { migrateAgeFormat, convertToMinimumAge };
